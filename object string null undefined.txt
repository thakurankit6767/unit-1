For e.g If I click on ‘Object’, I should see information about Js objects like what are objects, how they work, mutability, etc.


Create buttons namely ‘Objects’, ‘Arrays’, ‘Functions’, ‘Strings’, ‘Numbers’, ‘null’, ‘undefined’ in index.html.

1.object

1.In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. 
A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. 
The same way, JavaScript objects can have properties, which define their characteristics.
2.Like all JavaScript variables, both the object name (which could be a normal variable) and property name are 
case sensitive. You can define a property by assigning it a value. For example, let's create an object 
named myCar and give it properties named make, model, and year as follows:

const myCar = new Object();
myCar.make = 'Ford';
myCar.model = 'Mustang';
myCar.year = 1969;
3.A mutable object is an object whose state can be modified after it is created. Immutables are the objects whose state cannot be 
changed once the object is created. Strings and Numbers are Immutable.


2.Arrays
1.An array is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together.
2.An array is a data structure, which can store a fixed-size collection of elements of the same data type. An array is used to store a 
collection of data, but it is often more useful to think of an array as a collection of variables of the 
same type. ... All arrays consist of contiguous memory locations.
3.
An immutable array is a unique copy of the original that, when manipulated, does not affect the original.

3.functions

1.A function in JavaScript is similar to a procedure—a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function,
 it should take some input and return an output where there is some obvious relationship between the input and the output.
2.The name of the function.
A list of parameters to the function, enclosed in parentheses and separated by commas.
The JavaScript statements that define the function, enclosed in curly brackets, {...}.
3.Primitive parameters (such as a number) are passed to functions by value; the value is passed to the function, but if the function 
changes the value of the parameter, this change is not reflected globally or in the calling function.

4.String

1.A JavaScript string stores a series of characters like "John Doe". A string can be any text inside double or single quotes: let carName1 = "Volvo XC60"; let carName2 = 'Volvo XC60'; String indexes are zero-based: The first character is in position 0, the second in 1, and so o2.Strings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their length, to build and concatenate them using the + and += string operators, checking for the existence or location of substrings with the indexOf() method, or extracting substrings with the substring() method3.String is an example of an immutable type. A String object always represents the same string. StringBuilder is an example of a mutable type. ...By contrast, StringBuilder objects are mutable.

5.Number
1.Number is a primitive wrapper object used to represent and manipulate numbers like 37 or -9.25 . The Number constructor 
contains constants and methods for working with numbers. 
Values of other types can be converted to numbers using the Number() function.
2.A number literal like 37 in JavaScript code is a floating-point value, not an integer. There is no separate integer type in 
common everyday use. (JavaScript now has a BigInt type, 
but it was not designed to replace Number for everyday uses. 37 is still a Number, not a BigInt.)

6.null
1.'Null' is a keyword in JavaScript that signifies 'no value' or nonexistence of any value. If you wish to shred a 
variable off its assigned value, you can simply assign 'null' to it.
 Besides this, like any other object, it is never implicitly assigned to a variable by JavaScript
2.The JavaScript specification says about null : null is a primitive value that represents the intentional absence of any object value. 
If you see null (either assigned to a variable or returned by a function), 
then at that place should have been an object, but for some reason, an object wasn't created.

7.undefined
1.undefined is a property of the global object. That is, it is a variable in global scope. ... A variable that has 
not been assigned a value is of type undefined . A method or statement 
also returns undefined if the variable that is being evaluated does not have an assigned value.
2.A variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does 
not have an assigned value. A function returns undefined if a value was not returned.